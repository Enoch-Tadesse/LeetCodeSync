# for each node, create an array and keep track of how many other ways they can be affectes
# anyone who can be affected more than one way, can never be saved by removing a node
class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        initial.sort()
        self.init = set(initial)
        self.possible = [0] * len(graph)
        for inf in initial:
            self.path = set([inf])
            self.traverse(inf, graph)
        ans , idx = float("-inf") , initial[0]
        # print(self.possible)
        for inf in initial:
            if self.possible[inf] > 0:
                continue
            self.path = set([inf])
            self.save = 0
            self.canSave(inf, graph)
            # print(self.save)
            if ans < self.save:
                ans = self.save
                idx = inf
        return idx
    def canSave(self, curr, grid):
        for col in range(len(grid)):
            if grid[curr][col] == 1:
                if self.possible[col] > 1 or col in self.path or col in self.init:
                    continue
                self.save += 1
                self.path.add(col)
                self.canSave(col, grid)

                
    def traverse(self, curr, grid):
        for col in range(len(grid)):
            if grid[curr][col] == 1:
                if col in self.path :
                    continue
                self.path.add(col)
                self.possible[col] += 1
                self.traverse(col, grid)
            